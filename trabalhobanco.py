# -*- coding: utf-8 -*-
"""TrabalhoBanco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AWa9q0ZR1Q6LTg1B9Qi4fCegMcxw9dEY
"""

import pandas as pd
from google.colab import files
!pip install biopython
import Bio
from Bio import Entrez, SeqIO
import json as js


def ReadMardyCSV():
  files.upload() #Meio para fazer o upload do CSV "DB_by_gene.csv" do Mardy no Colab

  pd.set_option('display.max_rows', 500)
  pd.set_option('display.max_columns', 500)
  pd.set_option('display.width', 1000)

  mardyCSV = pd.read_csv('DB_by_gene.csv', header = 1)
  mardyCSV.rename(columns = {'Gene name':'GeneName', 'Found in':'FoundIn', 'Gene locus':'GeneLocus', 'AA mutation':'AAMutation',
                        'Tandem repeat name':'TandemRepeatName', 'Tandem repeat sequence':'TandemRepeatSequence'}, inplace = True)
  
  return mardyCSV


def GetCSVGenes(mardyCSV):
  genes = []
  for i in range(len(mardyCSV.GeneName)):
    genes.append(mardyCSV.GeneName[i])
  
  genes = sorted(set(genes)) #Remove genes duplicados e os ordena

  return genes


def GetNCBIData(genes):
  Entrez.email = "sofia17faber@gmail.com"
  
  results, remove = searchGenes(genes)
  
  genes = removeGenes(genes, remove)

  data = getSearchResults(genes, results)

  return data


def searchGenes(genes):
  results = {}
  remove = []
  
  for i in range(len(genes)):
    handle = Entrez.esearch(db = "nucleotide", term = genes[i])
    record = Entrez.read(handle)
    if len(record['IdList'])>2: #Utiliza os genes com pelo menos 3 resultados
      results[genes[i]] = record["IdList"][0], record['IdList'][1], record['IdList'][2]
    else:
      remove.append(genes[i])

  return results, remove


def removeGenes(genes, remove):
  for i in range(len(remove)):
    genes.remove(remove[i])

  return genes


def getSearchResults(genes, results):
  data = {}
  content = ["GBSeq_references", "GBSeq_strandedness", "GBSeq_locus", "GBSeq_length", "GBSeq_moltype", "GBSeq_topology",
          "GBSeq_division", "GBSeq_definition", "GBSeq_accession-version"]

  for i in range(len(genes)):
      handle = Entrez.efetch(db = "nucleotide", id = results[genes[i]][0], retmode = "xml") #Pega os 3 primeiros resultados do NCBI para o gene
      records1 = Entrez.read(handle)
      handle = Entrez.efetch(db = "nucleotide", id = results[genes[i]][1], retmode = "xml")
      records2 = Entrez.read(handle)
      handle = Entrez.efetch(db = "nucleotide", id = results[genes[i]][2], retmode = "xml")
      records3 = Entrez.read(handle)
      for j in range(len(content)):
        aux = True
        if (not content[j] in records1[0].keys()) or (not content[j] in records2[0].keys()) or (not content[j] in records3[0].keys()): #Utiliza somente os genes em que os resultados possuem todas as chaves do content
          aux = False
      if aux == True:
        data[genes[i]] = "First Result:", results[genes[i]][0], records1[0]["GBSeq_locus"], records1[0]["GBSeq_length"], records1[0]["GBSeq_strandedness"], records1[0]["GBSeq_moltype"], records1[0]["GBSeq_topology"], records1[0]["GBSeq_division"], records1[0]["GBSeq_definition"], records1[0]["GBSeq_accession-version"], records1[0]["GBSeq_source"], records1[0]["GBSeq_references"],\
        "Second Result:", results[genes[i]][1], records2[0]["GBSeq_locus"], records2[0]["GBSeq_length"], records2[0]["GBSeq_strandedness"], records2[0]["GBSeq_moltype"], records2[0]["GBSeq_topology"], records2[0]["GBSeq_division"], records2[0]["GBSeq_definition"], records2[0]["GBSeq_accession-version"], records2[0]["GBSeq_source"], records2[0]["GBSeq_references"],\
        "Third Result:", results[genes[i]][2], records3[0]["GBSeq_locus"], records3[0]["GBSeq_length"], records3[0]["GBSeq_strandedness"], records3[0]["GBSeq_moltype"], records3[0]["GBSeq_topology"], records3[0]["GBSeq_division"], records3[0]["GBSeq_definition"], records3[0]["GBSeq_accession-version"], records3[0]["GBSeq_source"], records3[0]["GBSeq_references"]

  return data


def CreateJSON(data):
  json = js.dumps(data, indent = 1, separators = ('\r\n', ':'), sort_keys = True)
  file = open('integrated_databases.json', 'w')
  file.write(json)
  file.close()
  files.download('integrated_databases.json.json')
  return json
  

 def Main():
  mardyCSV = ReadMardyCSV()
  genes = GetCSVGenes(mardyCSV)
  data = GetNCBIData(genes)
  json = CreateJSON(data)
  print(json)